package com.example.security.service.impl;

import com.example.security.service.facade.CreneauService;
import com.example.security.service.facade.GenerationCreneauxParDefautService;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import jakarta.annotation.PostConstruct;

@Component
public class CreneauCleanupScheduler {

    private final CreneauService creneauService;
    private final GenerationCreneauxParDefautService generationService;

    public CreneauCleanupScheduler(CreneauService creneauService,
                                   GenerationCreneauxParDefautService generationService) {
        this.creneauService = creneauService;
        this.generationService = generationService;
    }

    /**
     * üî• NOUVELLE T√ÇCHE : Nettoyage + G√©n√©ration automatique tous les jours √† 1h du matin
     */
    @Scheduled(cron = "0 0 1 * * *")
    public void dailyCreneauxMaintenance() {
        System.out.println("=== MAINTENANCE QUOTIDIENNE DES CR√âNEAUX (1h du matin) ===");

        // 1. Nettoyer les cr√©neaux pass√©s
        creneauService.cleanupPassedCreneaux();

        // 2. G√©n√©rer les nouveaux cr√©neaux pour les semaines √† venir
        generationService.generateFutureCreneaux();

        System.out.println("=== FIN DE LA MAINTENANCE QUOTIDIENNE ===");
    }

    /**
     * üî• NOUVELLE T√ÇCHE : G√©n√©ration proactive √† 6h du matin (heures de pointe)
     */
    @Scheduled(cron = "0 0 6 * * *")
    public void morningCreneauxGeneration() {
        System.out.println("=== G√âN√âRATION MATINALE DES CR√âNEAUX (6h du matin) ===");
        generationService.generateFutureCreneaux();
    }

    /**
     * Maintenance compl√®te au d√©marrage de l'application
     */
    @EventListener(ApplicationReadyEvent.class)
    public void maintenanceOnStartup() {
        System.out.println("=== MAINTENANCE COMPL√àTE AU D√âMARRAGE ===");

        try {
            // 1. Nettoyer les cr√©neaux pass√©s
            creneauService.cleanupPassedCreneaux();

            // 2. G√©n√©rer les cr√©neaux futurs
            generationService.generateFutureCreneaux();

            System.out.println("‚úÖ Maintenance au d√©marrage termin√©e avec succ√®s");
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la maintenance au d√©marrage : " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Maintenance imm√©diate lors de l'initialisation du bean
     */
    @PostConstruct
    public void immediateMaintenanceCreneaux() {
        System.out.println("=== MAINTENANCE IMM√âDIATE DES CR√âNEAUX ===");
        try {
            // Nettoyer d'abord
            creneauService.cleanupPassedCreneaux();

            // Puis g√©n√©rer
            generationService.generateFutureCreneaux();

            System.out.println("‚úÖ Maintenance imm√©diate termin√©e");
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la maintenance imm√©diate : " + e.getMessage());
        }
    }

    /**
     * Nettoyage hebdomadaire des cr√©neaux tr√®s anciens (plus de 30 jours)
     * Tous les dimanches √† 2h du matin
     */
    @Scheduled(cron = "0 0 2 * * SUN")
    public void weeklyOldCreneauxCleanup() {
        System.out.println("=== NETTOYAGE HEBDOMADAIRE DES CR√âNEAUX ANCIENS ===");
        creneauService.cleanupOldCreneaux(30); // Supprimer les cr√©neaux de plus de 30 jours
    }

    /**
     * üî• NOUVELLE T√ÇCHE : Maintenance pendant les heures d'ouverture (9h-17h)
     * Toutes les 2 heures pour s'assurer que les cr√©neaux sont toujours disponibles
     */
    @Scheduled(cron = "0 0 9,11,13,15,17 * * MON-SAT")
    public void businessHoursCreneauxCheck() {
        System.out.println("=== V√âRIFICATION CR√âNEAUX PENDANT HEURES D'OUVERTURE ===");

        // Nettoyer les cr√©neaux pass√©s en temps r√©el
        creneauService.cleanupPassedCreneaux();

        // G√©n√©rer de nouveaux cr√©neaux si n√©cessaire
        generationService.generateFutureCreneaux();
    }

    /**
     * üî• T√ÇCHE SP√âCIALE : R√©g√©n√©ration compl√®te le dimanche soir √† 23h
     * Pour pr√©parer la semaine suivante
     */
    @Scheduled(cron = "0 0 23 * * SUN")
    public void weeklyCompleteRegeneration() {
        System.out.println("=== R√âG√âN√âRATION COMPL√àTE HEBDOMADAIRE (Dimanche 23h) ===");

        try {
            // R√©g√©n√©rer tous les cr√©neaux futurs
            generationService.regenerateAllFutureCreneaux();
            System.out.println("‚úÖ R√©g√©n√©ration compl√®te termin√©e");
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la r√©g√©n√©ration compl√®te : " + e.getMessage());
        }
    }

    /**
     * üö® M√âTHODE DE D√âBOGAGE : Force la g√©n√©ration (√† activer manuellement si besoin)
     * Utile pour les tests ou d√©pannage
     */
    // @Scheduled(fixedRate = 60000) // Toutes les minutes (d√©commenter pour debug)
    public void debugCreneauxGeneration() {
        System.out.println("üêõ DEBUG - G√©n√©ration forc√©e des cr√©neaux");
        generationService.generateFutureCreneaux();
    }
}